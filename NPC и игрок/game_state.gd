extends Node

# --- –°—Ç–∞—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã ---
var npcs_talked_to = {}
var quests = {}
var active_quests = []
var completed_quests = []
var quest_database = {
	"kill_two_enemies": {
		"title": "–£–≥—Ä–æ–∑–∞ –Ω–∞ —Ä–∞–≤–Ω–∏–Ω–∞—Ö",
		"description": "–£–Ω–∏—á—Ç–æ–∂—å –¥–≤–æ–∏—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤.",
		"target_count": 2
	}
}

# --- –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–†–ï–î–ú–ï–¢–û–í ---
# –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞. –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä–∏ —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
var inventory = []

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ.
# –ú—ã –æ–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –∞ –µ–≥–æ "—à–∞–±–ª–æ–Ω".
var item_database = {
	"simple_sword": {
		"name": "–ü—Ä–æ—Å—Ç–æ–π –º–µ—á",
		"type": "weapon",
		"base_damage": 10,
		"damage_variance": 3,
		"rarity": "common",
		"icon_path": "res://UIScrin/Sword.png"
	},
	"buff_damage_10": {
	"name": "–ë–∞—Ñ—Ñ: +10% —É—Ä–æ–Ω–∞",
	"type": "buff",
	"buff_type": "damage",
	"value": 0.10,
	"rarity": "common",
	"icon_path":"res://UIScrin/–ö–Ω–∏–≥–∞.png"
},
	"rusty_axe": {
		"name": "–†–∂–∞–≤—ã–π —Ç–æ–ø–æ—Ä",
		"type": "weapon",
		"base_damage": 14,
		"damage_variance": 5,
		"rarity": "uncommon"
	},
	"magic_staff": {
		"name": "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö",
		"type": "weapon",
		"base_damage": 8,
		"damage_variance": 2,
		"rarity": "rare"
	}
}

func generate_random_item(chest_type: String = "common") -> Dictionary:
	var rarity_weights = {
		"common": {"common": 0.8, "uncommon": 0.15, "rare": 0.05},
		"rare":   {"common": 0.4, "uncommon": 0.4,  "rare": 0.2},
		"epic":   {"common": 0.1, "uncommon": 0.4,  "rare": 0.5}
	}

	var weights = rarity_weights.get(chest_type, rarity_weights["common"])
	var filtered_ids = []

	for id in item_database.keys():
		var item = item_database[id]
		if weights.has(item.rarity):
			for i in range(int(weights[item.rarity] * 100)):
				filtered_ids.append(id)

	var random_id = filtered_ids[randi() % filtered_ids.size()]
	var template = item_database[random_id]

	var new_item = {
		"name": template.name,
		"type": template.type,
		"rarity": template.rarity
	}

	if template.has("base_damage"):
		new_item["damage"] = template.base_damage + randi_range(-template.damage_variance, template.damage_variance)

	if template.has("icon_path"):
		new_item["icon_path"] = template.icon_path
		print("üé® –ò–∫–æ–Ω–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:", new_item["name"], "‚Üí", new_item["icon_path"])
	else:
		print("‚ö†Ô∏è –£ –ø—Ä–µ–¥–º–µ—Ç–∞", new_item["name"], "–Ω–µ—Ç icon_path!")

	# –ë–æ–Ω—É—Å—ã —Å —à–∞–Ω—Å–æ–º
	if randf() < 0.3:
		new_item["bonus"] = {
			"crit_chance": randf_range(0.05, 0.15)
		}

	return new_item



# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò ---

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
func generate_item(item_id: String):
	if not item_database.has(item_id):
		return null # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ—Ç—É

	var template = item_database[item_id]
	var new_item = {} # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞

	# –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
	new_item["name"] = template.name
	new_item["type"] = template.type

	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	if template.has("base_damage"):
		var damage = template.base_damage + randi_range(-template.damage_variance, template.damage_variance)
		new_item["damage"] = damage
	
	# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ (—Ü–µ–Ω–∞, –ø—Ä–æ—á–Ω–æ—Å—Ç—å...)

	return new_item

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
func add_item_to_inventory(item_data):
	if item_data:
		inventory.append(item_data)
		print("–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ", item_data)

		# –û–±–Ω–æ–≤–ª—è–µ–º UI, –µ—Å–ª–∏ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ
		var wm = get_tree().root.find_child("PauseMenu", true, false)
		if wm:
			wm.update_inventory_display()


# --- –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è NPC –∏ –∫–≤–µ—Å—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
# ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤ –∏ NPC –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å) ...

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞–º–∏ ---
func add_quest(quest_id):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –∫–≤–µ—Å—Ç–∞ —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç
	if not quests.has(quest_id) and quest_database.has(quest_id):
		var quest_data = quest_database[quest_id]
		# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–≤–µ—Å—Ç–∞
		quests[quest_id] = {
			"title": quest_data.title,
			"description": quest_data.description,
			"progress": 0,
			"target": quest_data.target_count,
			"completed": false
		}
		active_quests.append(quest_id)
		print("–ù–æ–≤—ã–π –∫–≤–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ", quest_id)

func advance_quest(quest_id, amount = 1):
	if quests.has(quest_id) and not quests[quest_id].completed:
		var quest = quests[quest_id]
		quest.progress += amount
		print("–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ '", quest_id, "': ", quest.progress, "/", quest.target)
		
		# –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
		if quest.progress >= quest.target:
			complete_quest(quest_id)

func complete_quest(quest_id):
	if quests.has(quest_id):
		quests[quest_id].completed = true
		active_quests.erase(quest_id)
		completed_quests.append(quest_id)
		print("–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: ", quest_id)

# --- –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
func mark_npc_as_talked(npc_id):
	npcs_talked_to[npc_id] = true

func has_talked_to_npc(npc_id) -> bool:
	return npcs_talked_to.has(npc_id)
